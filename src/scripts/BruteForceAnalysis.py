import matplotlib.pyplot as plt

import data_processing.VecRep
from visualization import Metrics, GraphEstimates
from visualization.Metrics import PlottingData
import logging
import sys

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s [%(levelname)s] %(message)s",
    handlers=[logging.StreamHandler(sys.stdout)],
)


def investigate_k(plottingData: PlottingData, numK=None):
    """
    :param numK: Number of K swept before ending the sweep. inclusive
    :param plottingData:
    :return: Creates graphs to visualize how the chosen value of k neighbour score affects the neighbour score for the input plotting data
    Remember to use plt.show() to display plots
    Aims to answer the question: What is the best value to choose for K?
    """

    scoreFig, ([imgAx1, ax1], [imgAx2, ax2], [imgAx3, ax3], [temp, aveAx]) = plt.subplots(4, 2, width_ratios=[1, 3])
    axArr = [ax1, ax2, ax3]
    imgAxArr = [imgAx1, imgAx2, imgAx3]
    temp.set_axis_off()
    GraphEstimates.plot_swept_k_neighbours(axArr=axArr, imageAxArr=imgAxArr, aveAx=aveAx,
                                           kNormNeighbourScores=plottingData.kNormNeighbourScores,
                                           imagesFilepath=plottingData.imagesFilepath, numPlottedK=numK,
                                           aveNormKNeighbourScores=plottingData.aveNormKNeighbourScore)


def investigate_BF_method(plottingData: PlottingData, plottedImagesIndex=None, numSample=2):
    """
    :param plottedImagesIndex: Index of images you want to plot the k neighbours plot for
    :param numSample: Number of images to plot in the k neighbour plot
    :param plottingData:
    :return: Makes an eigenvalue graph
     swept k neighbours score graph for the mean K val and for a number of images
     and displays the frobenius distance for the embeddings
    Remember to use plt.show() to display plots

    Aims to answer the question: What is the error in using the selected method for generating embeddings?
    """
    # Comparing the largest and the most negative eigenvalues
    eigenFig, (ax1, ax2, ax3) = plt.subplots(3)
    GraphEstimates.plot_eigenvalues(ax1, ax2, plottingData.initialEigenvalues, plottingData.finalEigenvalues)
    GraphEstimates.plot_key_stats_text(ax3, plottingData)
    kNeighFig, axList = plt.subplots(numSample + 1, 2)
    if numSample != 0:
        imgArr = [row[0] for row in axList[:-1]]
        kNeighArr = [row[1] for row in axList[:-1]]
    else:
        imgArr = []
        kNeighArr = []
    aveAx = axList[-1][1]
    #Set the bottom right subplot to be empty
    axList[-1][0].set_axis_off()
    GraphEstimates.plot_swept_k_neighbours(axArr=kNeighArr, imageAxArr=imgArr, aveAx=aveAx,
                                           kNormNeighbourScores=plottingData.kNormNeighbourScores,
                                           aveNormKNeighbourScores=plottingData.aveNormKNeighbourScore,
                                           imagesFilepath=plottingData.imagesFilepath, nImageSample=numSample,
                                           imageIndexArr=plottedImagesIndex)



def investigate_pencorr_rank_constraint(*, imageType: str, filters=None, imageProductType: str, startingConstr: int,
                                        endingConstr: int, specifiedK=5):
    """
    :param specifiedK: value of k for the k neighbour score
    :param imageType:
    :param filters:
    :param imageProductType:
    :param startingConstr: Starting lowest rank constraint to start the sweep inclusive
    :param endingConstr: Final largest rank constraint to end the sweep inclusive
    :return: Uses the penncorr method to generate embeddings for different rank constraints
    Makes a graph of the average neighbour score against rank_constraint and
    average frobenius distance against rank_constraint
    Remember to use plt.show() to display plots

    Aims to answer the question: How does the rank constraint affect the error of the embeddings generated by penncorr?
    """
    if startingConstr >= endingConstr:
        raise ValueError("Starting rank constraint must be lower than ending constraint")

    aveNeighArr = []
    aveFrobDistanceArr = []
    rankConstraints = range(startingConstr, endingConstr + 1)
    for rank in rankConstraints:
        logging.info("Investigating rank " + str(rank) + "/" + str(endingConstr))
        embType = "pencorr_" + str(rank)
        plottingData = data_processing.VecRep.load_BF_plotting_data(imageType=imageType, filters=filters,
                                                                    imageProductType=imageProductType,
                                                                    embeddingType=embType)
        aveFrobDistanceArr.append(plottingData.aveFrobDistance)

        aveNeighArr.append(plottingData.get_specified_k_neighbour_score(specifiedK))
    rankFig, (neighAx, frobAx) = plt.subplots(1, 2)
    GraphEstimates.plot_error_against_rank_constraint(frobAx, neighAx, rankConstraints, aveFrobDistanceArr, aveNeighArr,
                                                      specifiedK)


def investigate_scaled_ncc(*, imageType: str, filters=None, imageProductType1: str, imageProductType2: str,
                           embeddingType: str, numPlottedK=None, overwrite=None):
    """
    :param imageType:
    :param filters:
    :param imageProductType1:
    :param imageProductType2:
    :param embeddingType:
    :param numPlottedK: number of K in the x axis for the k neighbour plot
    :return: Creates a figure for displaying the eigenvalue plots, basic stats and average neighbour score against k value for both image product 1 and image product 2

    Aims to answer the question: Does image product 1 result in better results than image product 2?
    """
    plottingData1 = data_processing.VecRep.load_BF_plotting_data(imageType=imageType, filters=filters,
                                                                 imageProductType=imageProductType1,
                                                                 embeddingType=embeddingType, overwrite=overwrite)
    plottingData2 = data_processing.VecRep.load_BF_plotting_data(imageType=imageType, filters=filters,
                                                                 imageProductType=imageProductType2,
                                                                 embeddingType=embeddingType, overwrite=overwrite)
    imgProd1Fig, ax1Arr = plt.subplots(4)
    ax1Arr = list(ax1Arr)
    imgProd1Fig.suptitle("Plots for " + imageProductType1)
    imgProd2Fig, ax2Arr = plt.subplots(4)
    ax2Arr = list(ax2Arr)
    imgProd2Fig.suptitle("Plots for " + imageProductType2)
    GraphEstimates.plot_comparison_btw_img_prod(ax1Arr, ax2Arr, imageProductType1, imageProductType2, plottingData1, plottingData2)

if __name__ == '__main__':
    imageType = "3bin"
    filters = ["unique"]
    imageProductType = "ncc"
    embeddingType = "pencorr_10"
    overwrite = {"filter": False, "im_prod": False, "estimate": False, 'plot': True}
    plottingData = data_processing.VecRep.load_BF_plotting_data(imageType=imageType, filters=filters,
                                                                imageProductType=imageProductType,
                                                                embeddingType=embeddingType, overwrite=overwrite)
    # General error analysis for one set of parameters
    investigate_BF_method(plottingData)

    # Sweep rank constraint
    #investigate_pencorr_rank_constraint(imageType=imageType, filters=filters, imageProductType=imageProductType, startingConstr=5, endingConstr=20)

    # Sweep the value of k
    #investigate_k(plottingData)

    # Carry out a general analysis for two image products
    #investigate_scaled_ncc(imageType=imageType,filters=filters, embeddingType=embeddingType, imageProductType1="ncc", imageProductType2="ncc_scaled", overwrite=overwrite )

    plt.show()
